{{- if and .Values.idaDatabase.internal.enabled (eq .Values.idaDatabase.type "mysql")}}
apiVersion: v1
kind: Secret
metadata:
  name: "{{.Release.Name}}-ida-web-secret"
  annotations:
    meta.helm.sh/release-name: {{.Release.Name}}
    meta.helm.sh/release-namespace: {{.Release.Namespace}}
  labels:
    app: "{{.Release.Name}}-ida-web"
    app.kubernetes.io/managed-by: Helm
data:
  DATABASE_NAME: {{"idaweb" | b64enc}}
  DATABASE_SERVER_NAME: {{printf "%s-ida-db" .Release.Name | b64enc}}
  DATABASE_PORT_NUMBER: {{"3306" | b64enc}}
  DATABASE_MAX_POOL_SIZE: {{"50" | b64enc}}
  DATABASE_USER: {{"root" | b64enc}}
  DATABASE_PASSWORD: {{"mysqladmin" | b64enc}}
{{- end}}
---

{{- if and .Values.idaDatabase.internal.enabled (eq .Values.idaDatabase.type "postgres")}}
apiVersion: v1
kind: Secret
metadata:
  name: "{{.Release.Name}}-ida-web-secret"
  annotations:
    meta.helm.sh/release-name: {{.Release.Name}}
    meta.helm.sh/release-namespace: {{.Release.Namespace}}
  labels:
    app: "{{.Release.Name}}-ida-web"
    app.kubernetes.io/managed-by: Helm
data:
  DATABASE_NAME: {{"idaweb" | b64enc}}
  DATABASE_SERVER_NAME: {{printf "%s-ida-db" .Release.Name | b64enc}}
  DATABASE_PORT_NUMBER: {{"5432" | b64enc}}
  DATABASE_MAX_POOL_SIZE: {{"50" | b64enc}}
  DATABASE_USER: {{"postgres" | b64enc}}
  DATABASE_PASSWORD: {{"password" | b64enc}}
{{- end}}

---

{{- if .Values.idaDatabase.external.enabled}}
apiVersion: v1
kind: Secret
metadata:
  name: "{{.Release.Name}}-ida-web-secret"
  annotations:
    meta.helm.sh/release-name: {{.Release.Name}}
    meta.helm.sh/release-namespace: {{.Release.Namespace}}
  labels:
    app: "{{.Release.Name}}-ida-web"
    app.kubernetes.io/managed-by: Helm
data:
  {{- if .Values.idaDatabase.external.databaseUrl}}
  DATABASE_URL: {{.Values.idaDatabase.external.databaseUrl | b64enc}}
  {{- end}}
  {{- if .Values.idaDatabase.external.databaseName}}
  DATABASE_NAME: {{.Values.idaDatabase.external.databaseName | b64enc}}
  {{- end}}
  {{- if .Values.idaDatabase.external.databaseServerName}}
  DATABASE_SERVER_NAME: {{.Values.idaDatabase.external.databaseServerName | b64enc}}
  {{- end}}
  {{- if .Values.idaDatabase.external.databasePort}}
  DATABASE_PORT_NUMBER: {{.Values.idaDatabase.external.databasePort | toString | b64enc}}
  {{- end}}
  {{- if .Values.idaDatabase.external.currentSchema}}
  CURRENT_SCHEMA: {{.Values.idaDatabase.external.currentSchema | b64enc}}
  {{- end}}
  DATABASE_MAX_POOL_SIZE: {{"50" | b64enc}}
{{- end}}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{.Release.Name}}-ida-web-config"
  annotations:
    meta.helm.sh/release-name: {{.Release.Name}}
    meta.helm.sh/release-namespace: {{.Release.Namespace}}
  labels:
    app: "{{.Release.Name}}-ida-web"
    app.kubernetes.io/managed-by: Helm
data:
  JNDI_NAME: "jdbc/ida"
  DATABASE_TYPE: "{{.Values.idaDatabase.type}}"
  {{- if gt (float64 (toString (.Values.idaWeb.replicas))) 1.0 }}
  {{- if eq .Values.idaDatabase.type "postgres"}}
  ORG_QUARTZ_JOBSTORE_DRIVERDELEGATECLASS: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
  {{- end}}
  ORG_QUARTZ_JOBSTORE_DATASOURCE_ENABLED: "true"
  HAZELCAST_NETWORK_JOIN_KUBERNETES_ENABLED: "true"
  HAZELCAST_NETWORK_JOIN_KUBERNETES_SERVICE_NAME: {{.Release.Name}}-ida-web
  HAZELCAST_NETWORK_JOIN_KUBERNETES_NAMESPACE: {{.Release.Namespace}}
  HAZELCAST_NETWORK_JOIN_TCP_IP_ENABLED: "false"
  {{- end}}
  {{- if .Values.selenium.hub.image}}
  SELENIUM_HUB_IMAGE_NAME: "{{.Values.selenium.hub.image}}"
  {{- end}}
  {{- if .Values.selenium.firefoxNode.image}}
  SELENIUM_FIREFOX_NODE_IMAGE_NAME: "{{.Values.selenium.firefoxNode.image}}"
  {{- end}}
  {{- if .Values.selenium.chromeNode.image}}
  SELENIUM_CHROME_NODE_IMAGE_NAME: "{{.Values.selenium.chromeNode.image}}"
  {{- end}}
  {{- if .Values.selenium.edgeNode.image}}
  SELENIUM_EDGE_NODE_IMAGE_NAME: "{{.Values.selenium.edgeNode.image}}"
  {{- end}}
  {{- if .Values.selenium.imagePullSecrets}}
  SELENIUM_IMAGE_PULL_SECRET: "{{.Values.selenium.imagePullSecrets}}"
  {{- end}}
  {{- if and (.Values.idaWeb.network.type) (eq .Values.idaWeb.network.type "ingress") (.Values.idaWeb.network.ingress.className) }}
  INGRESS_CLASS_NAME: "{{.Values.idaWeb.network.ingress.className}}"
  {{- end}}
  
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{.Release.Name}}-ida-web-ds"
  annotations:
    meta.helm.sh/release-name: {{.Release.Name}}
    meta.helm.sh/release-namespace: {{.Release.Namespace}}
  labels:
    app.kubernetes.io/managed-by: Helm
    app: "{{.Release.Name}}-ida-web"
data:
  {{- if eq .Values.idaDatabase.type "postgres"}}
  {{- if .Values.idaDatabase.external.currentSchema}}
  postgres.xml: |
    <server>
    	<!-- Configure attributes for the data source, such as JDBC vendor properties and connection pooling properties. For example:  -->
    	<dataSource jndiName="${env.JNDI_NAME}">
    	  <connectionManager maxPoolSize="${env.DATABASE_MAX_POOL_SIZE}"/>
          <jdbcDriver libraryRef="DBLib" />
          <properties.postgresql serverName="${env.DATABASE_SERVER_NAME}" portNumber="${env.DATABASE_PORT_NUMBER}" 
          	databaseName="${env.DATABASE_NAME}" currentSchema="${env.CURRENT_SCHEMA}"  user="${env.DATABASE_USER}" password="${env.DATABASE_PASSWORD}" />
        </dataSource>
    </server>
  {{- else}}
  postgres.xml: |
    <server>
    	<!-- Configure attributes for the data source, such as JDBC vendor properties and connection pooling properties. For example:  -->
    	<dataSource jndiName="${env.JNDI_NAME}">
    	  <connectionManager maxPoolSize="${env.DATABASE_MAX_POOL_SIZE}"/>
          <jdbcDriver libraryRef="DBLib" />
          <properties.postgresql serverName="${env.DATABASE_SERVER_NAME}" portNumber="${env.DATABASE_PORT_NUMBER}" 
          	databaseName="${env.DATABASE_NAME}" user="${env.DATABASE_USER}" password="${env.DATABASE_PASSWORD}" />
        </dataSource>
    </server>
  {{- end}}
  {{- end}}
  {{- if eq .Values.idaDatabase.type "db2"}}
  {{- if .Values.idaDatabase.external.currentSchema}}
  db2.xml: |
    <server>
    	<!-- Configure attributes for the data source, such as JDBC vendor properties and connection pooling properties. For example:  -->
    	<dataSource jndiName="${env.JNDI_NAME}" statementCacheSize="60" id="DefaultDataSource"
    	        isolationLevel="TRANSACTION_READ_COMMITTED" type="javax.sql.DataSource" transactional="true">
          <connectionManager maxPoolSize="${env.DATABASE_MAX_POOL_SIZE}"/>
    	  <jdbcDriver libraryRef="DBLib"/>
    	  <properties.db2.jcc databaseName="${env.DATABASE_NAME}" 
    	              serverName="${env.DATABASE_SERVER_NAME}" portNumber="${env.DATABASE_PORT_NUMBER}" 
    	              user="${env.DATABASE_USER}" currentSchema="${env.CURRENT_SCHEMA}" password="${env.DATABASE_PASSWORD}"/>
    	</dataSource>
    </server>
  {{- else}}
  db2.xml: |
    <server>
    	<!-- Configure attributes for the data source, such as JDBC vendor properties and connection pooling properties. For example:  -->
    	<dataSource jndiName="${env.JNDI_NAME}" statementCacheSize="60" id="DefaultDataSource"
    	        isolationLevel="TRANSACTION_READ_COMMITTED" type="javax.sql.DataSource" transactional="true">
          <connectionManager maxPoolSize="${env.DATABASE_MAX_POOL_SIZE}"/>
    	  <jdbcDriver libraryRef="DBLib"/>
    	  <properties.db2.jcc databaseName="${env.DATABASE_NAME}" 
    	              serverName="${env.DATABASE_SERVER_NAME}" portNumber="${env.DATABASE_PORT_NUMBER}" 
    	              user="${env.DATABASE_USER}" password="${env.DATABASE_PASSWORD}"/>
    	</dataSource>
    </server>
  {{- end}}
  {{- end}} 
  {{- if eq .Values.idaDatabase.type "mysql"}}
  mysql.xml: |
    <server>
    	<!-- Configure attributes for the data source, such as JDBC vendor properties and connection pooling properties. For example:  -->
    	<dataSource jndiName="${env.JNDI_NAME}" statementCacheSize="60" id="DefaultDataSource"
    	        isolationLevel="TRANSACTION_READ_COMMITTED" type="javax.sql.DataSource" transactional="true">
    	  <connectionManager maxPoolSize="${env.DATABASE_MAX_POOL_SIZE}"/>
    	  <jdbcDriver libraryRef="DBLib"/>
    	  <properties databaseName="${env.DATABASE_NAME}" 
    	              serverName="${env.DATABASE_SERVER_NAME}" portNumber="${env.DATABASE_PORT_NUMBER}" 
    	              user="${env.DATABASE_USER}" password="${env.DATABASE_PASSWORD}"/>
    	</dataSource>  
    </server>
  {{- end}} 
  {{- if eq .Values.idaDatabase.type "oracle"}}
  oracle.xml: |
    <server>
    	<!-- Configure attributes for the data source, such as JDBC vendor properties and connection pooling properties. For example:  -->
    	<dataSource jndiName="${env.JNDI_NAME}" statementCacheSize="60" id="DefaultDataSource"
    	        isolationLevel="TRANSACTION_READ_COMMITTED" type="javax.sql.DataSource" transactional="true">
    	  <connectionManager maxPoolSize="${env.DATABASE_MAX_POOL_SIZE}"/>
    	  <jdbcDriver libraryRef="DBLib"/>
    	  <properties.oracle url="${env.DATABASE_URL}"
    	        user="${env.DATABASE_USER}" password="${env.DATABASE_PASSWORD}"/>
    	</dataSource>
    </server>
  {{- end}} 
 
---

{{- if not .Values.idaWeb.tlsCertSecret}}
apiVersion: v1
kind: Secret
metadata:
  name: "{{.Release.Name}}-ida-web-tls"
  annotations:
    meta.helm.sh/release-name: {{.Release.Name}}
    meta.helm.sh/release-namespace: {{.Release.Namespace}}
  labels:
    app.kubernetes.io/managed-by: Helm
    app: "{{.Release.Name}}-ida-web"
data:
  {{- if .Values.idaWeb.tlsCert}}
  tls.crt: {{.Values.idaWeb.tlsCert}}
  tls.key: {{.Values.idaWeb.tlsCert}}
  {{- else}}
  tls.crt: {{ .Files.Get "files/ida.crt" | b64enc }}
  tls.key: {{ .Files.Get "files/ida.key" | b64enc }}
  {{- end}}
type: kubernetes.io/tls
{{- end}}
 
---

{{- if and (not .Values.idaWeb.trustedCertSecret) .Values.idaWeb.ldapCert}}
apiVersion: v1
kind: Secret
metadata:
  name: "{{.Release.Name}}-ida-web-trusted-certs"
  annotations:
    meta.helm.sh/release-name: {{.Release.Name}}
    meta.helm.sh/release-namespace: {{.Release.Namespace}}
  labels:
    app.kubernetes.io/managed-by: Helm
    app: "{{.Release.Name}}-ida-web"
data:
  {{- if .Values.idaWeb.ldapCert}}
  ldap.crt: {{.Values.idaWeb.ldapCert}}
  {{- end}}
type: Opaque
{{- end}}
