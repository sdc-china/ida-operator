{{- if not .Values.idaWeb.storage.existingDataPVCName}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: "{{.Release.Name}}-ida-web"
  name: "{{.Release.Name}}-ida-data-pvc"
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "{{.Values.shared.storageClassName}}"
  resources:
    requests:
      storage: "{{.Values.idaWeb.storage.storageCapacity}}"
{{- end}}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: "{{.Release.Name}}-ida-web"
  name: "{{.Release.Name}}-ida-web"
spec:
  ports:
  - name: https-port
    port: 9443
    targetPort: 9443
  - name: http-port
    port: 9080
    targetPort: 9080
  - name: hazelcast
    port: 5701
    targetPort: 5701
  selector:
    app: "{{.Release.Name}}-ida-web"
  type: "{{.Values.idaWeb.serviceType}}"

---

{{- if eq .Values.idaWeb.network.type "route"}}
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "{{.Release.Name}}-ida-web"
  labels:
    app: "{{.Release.Name}}-ida-web"
spec:
{{- if .Values.idaWeb.network.hostname}}
  host: "{{.Values.idaWeb.network.hostname}}"
{{- end}}
  to:
    kind: Service
    name: "{{.Release.Name}}-ida-web"
    weight: 100
  port:
    targetPort: https-port
  tls:
    termination: passthrough
  wildcardPolicy: None
{{- end}}
  
---

{{- if eq .Values.idaWeb.network.type "ingress"}}
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  {{- if not (empty .Values.idaWeb.network.ingress.annotations) }}
  annotations:
    {{- .Values.idaWeb.network.ingress.annotations | toYaml | nindent 4 }}
  {{- end }}
  name: "{{.Release.Name}}-ida-web"
spec:
  {{- if .Values.idaWeb.network.ingress.className}}
  ingressClassName: "{{.Values.idaWeb.network.ingress.className}}"
  {{- end}}
  rules:
    - http:
        paths:
          - backend:
              service:
                name: "{{.Release.Name}}-ida-web"
                port:
                  number: 9443
            path: /
            pathType: Prefix

    {{- if .Values.idaWeb.network.hostname}}
      host: "{{.Values.idaWeb.network.hostname}}"
    {{- end}}
{{- end}}
  
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: "{{.Release.Name}}-ida-web"
  name: "{{.Release.Name}}-ida-web"
spec:
  replicas: {{.Values.idaWeb.replicas}}
  selector:
    matchLabels:
      app: "{{.Release.Name}}-ida-web"
  template:
    metadata:
      labels:
        app: "{{.Release.Name}}-ida-web"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/idaweb-config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{.Values.idaWeb.serviceAccountName}}
      containers:
      - name: "{{.Release.Name}}-ida-web"
        envFrom:
          - secretRef:
              name: "{{.Release.Name}}-ida-web-secret"
          {{- if .Values.idaDatabase.external.enabled}}
          - secretRef:
              name: "{{.Values.idaDatabase.external.databaseCredentialSecret}}"
          {{- end}}
          - configMapRef:
              name: "{{.Release.Name}}-ida-web-config"
        env:
          {{- if .Values.idaWeb.jvmArgs}}
          - name: JVM_ARGS
            value: >-
              {{.Values.idaWeb.jvmArgs}}
          {{- end}}
        image: {{.Values.idaWeb.image}}
        imagePullPolicy: {{.Values.idaWeb.imagePullPolicy}}
        {{- if or .Values.idaWeb.resources.cpuLimit .Values.idaWeb.resources.limits.cpu}}
        resources:
          limits:
            cpu: "{{default .Values.idaWeb.resources.cpuLimit .Values.idaWeb.resources.limits.cpu}}"
            memory: "{{default .Values.idaWeb.resources.memoryLimit  .Values.idaWeb.resources.limits.memory}}"
          requests:
            cpu: "{{default .Values.idaWeb.resources.cpuRequest .Values.idaWeb.resources.requests.cpu}}"
            memory: "{{default .Values.idaWeb.resources.memoryRequest .Values.idaWeb.resources.requests.memory}}"
        {{- end}}
        livenessProbe:
          httpGet:
            path: /ida
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 50
          periodSeconds: 10
          failureThreshold: 20
        readinessProbe:
          httpGet:
            path: /ida
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 50
          periodSeconds: 10
          failureThreshold: 20        
        ports:
        - containerPort: 9443
        - containerPort: 9080
        - containerPort: 5701
        volumeMounts:
        {{- if .Values.idaWeb.serverXmlConfig}}
        - name: "{{.Release.Name}}-ida-server-xml"
          mountPath: "/opt/ol/wlp/usr/servers/defaultServer/server.xml"
          subPath: "server.xml"
        {{- end}}
        - name: "{{.Release.Name}}-ida-web-ds"
          mountPath: "/opt/ol/wlp/usr/servers/defaultServer/{{.Values.idaDatabase.type}}.xml"
          subPath: "{{.Values.idaDatabase.type}}.xml"
        - name: tls-cert-dir
          mountPath: /opt/ol/wlp/usr/servers/defaultServer/resources/security
        {{- if .Values.idaWeb.storage.existingDataPVCName}}
        - mountPath: /var/ida/data
          name: "{{.Values.idaWeb.storage.existingDataPVCName}}"
        {{- else}}
        - mountPath: /var/ida/data
          name: "{{.Release.Name}}-ida-data-pvc"
        {{- end}}
        - mountPath: /opt/ol/wlp/usr/shared/resources/jdbc
          subPath: jdbc
          name: jdbc-driver-dir
      restartPolicy: Always
      {{- if .Values.idaWeb.imagePullSecrets}}
      imagePullSecrets:
        - name: {{.Values.idaWeb.imagePullSecrets}}
      {{- end}}
      initContainers:
      - name: jdbc-driver-prepare
        image: {{.Values.operator.image}}
        imagePullPolicy: {{.Values.idaWeb.imagePullPolicy}}
        command: ["/bin/bash", "-c"]
        args: ["/opt/helm/prepareJdbcDrivers.sh"]
        volumeMounts:
        - mountPath: /driver-folder
          name: jdbc-driver-dir
        resources:
          limits:
            cpu: "{{.Values.idaWeb.initContainer.resources.limits.cpu}}"
            memory: "{{.Values.idaWeb.initContainer.resources.limits.memory}}"
          requests:
            cpu: "{{.Values.idaWeb.initContainer.resources.requests.cpu}}"
            memory: "{{.Values.idaWeb.initContainer.resources.requests.memory}}"
      - name: tls-cert-prepare
        image: {{.Values.idaWeb.image}}
        imagePullPolicy: {{.Values.idaWeb.imagePullPolicy}}
        command: ["/bin/bash", "-c"]
        args: ["/opt/ol/wlp/script/importcerts.sh"]
        volumeMounts:
        - mountPath: /tls-cert
          name: ida-tls-cert
        {{- if or .Values.idaWeb.trustedCertSecret .Values.idaWeb.ldapCert}}
        - mountPath: /trusted-cert
          name: ida-trusted-cert
        {{- end}}
        - mountPath: /cert-share
          name: tls-cert-dir
        resources:
          limits:
            cpu: "{{.Values.idaWeb.initContainer.resources.limits.cpu}}"
            memory: "{{.Values.idaWeb.initContainer.resources.limits.memory}}"
          requests:
            cpu: "{{.Values.idaWeb.initContainer.resources.requests.cpu}}"
            memory: "{{.Values.idaWeb.initContainer.resources.requests.memory}}"
      {{- if .Values.idaDatabase.internal.enabled}}
      - name: wait-idadb
        image: {{.Values.idaWeb.image}}
        {{- if eq .Values.idaDatabase.type "mysql"}}
        command: ['sh', '-c', "if command -v nc >/dev/null 2>&1; then until nc -z {{.Release.Name}}-ida-db 3306; do echo waiting for {{.Release.Name}}-ida-db; sleep 1; done;  fi"]
        {{- end}}
        {{- if eq .Values.idaDatabase.type "postgres"}}
        command: ['sh', '-c', "if command -v nc >/dev/null 2>&1; then until nc -z {{.Release.Name}}-ida-db 5432; do echo waiting for {{.Release.Name}}-ida-db; sleep 1; done;  fi"]
        {{- end}}
        resources:
          limits:
            cpu: "{{.Values.idaWeb.initContainer.resources.limits.cpu}}"
            memory: "{{.Values.idaWeb.initContainer.resources.limits.memory}}"
          requests:
            cpu: "{{.Values.idaWeb.initContainer.resources.requests.cpu}}"
            memory: "{{.Values.idaWeb.initContainer.resources.requests.memory}}"
      {{- end}}
      volumes:
      - name: "{{.Release.Name}}-ida-web-ds"
        configMap:
          name: "{{.Release.Name}}-ida-web-ds"
          defaultMode: 420
      {{- if .Values.idaWeb.storage.existingDataPVCName}}
      - name: "{{.Values.idaWeb.storage.existingDataPVCName}}"
        persistentVolumeClaim:
          claimName: "{{.Values.idaWeb.storage.existingDataPVCName}}"
      {{- else}}
      - name: "{{.Release.Name}}-ida-data-pvc"
        persistentVolumeClaim:
          claimName: "{{.Release.Name}}-ida-data-pvc"
      {{- end}}
      - name: "jdbc-driver-dir"
        emptyDir: {}
      - name: "ida-tls-cert"
        secret:
          {{- if .Values.idaWeb.tlsCertSecret}}
          secretName: "{{.Values.idaWeb.tlsCertSecret}}"
          {{- else}}
          secretName: {{.Release.Name}}-ida-web-tls
          {{- end}}
          defaultMode: 420
      {{- if or .Values.idaWeb.trustedCertSecret .Values.idaWeb.ldapCert}}
      - name: "ida-trusted-cert"
        secret:
          {{- if .Values.idaWeb.trustedCertSecret}}
          secretName: "{{.Values.idaWeb.trustedCertSecret}}"
          {{- else}}
          secretName: "{{.Release.Name}}-ida-web-trusted-certs"
          {{- end}}
          defaultMode: 420
      {{- end}}
      {{- if .Values.idaWeb.serverXmlConfig}}
      - name: "{{.Release.Name}}-ida-server-xml"
        configMap:
          name: "{{.Values.idaWeb.serverXmlConfig}}"
          defaultMode: 420
      {{- end}}
      - name: "tls-cert-dir"
        emptyDir: {}